#!/usr/bin/env bash
#
# bootstrap the machine

# Utils
function ask_for_sudo() {
  # Ask for the administrator password upfront
  sudo -v

  # Update existing `sudo` time stamp until this script has finished
  # https://gist.github.com/cowboy/3118588
  while true; do
    sudo -n true
    sleep 60
    kill -0 "$$" || exit
  done &> /dev/null &
}

# OS detection
function is_osx() {
  [[ "$OSTYPE" =~ ^darwin ]] || return 1
}
function is_ubuntu() {
  [[ "$(cat /etc/issue 2> /dev/null)" =~ Ubuntu ]] || return 1
}
function get_os() {
  for os in osx ubuntu; do
    is_$os; [[ $? == ${1:-0} ]] && echo $os
  done
}

function answer_is_yes() {
  [[ "$REPLY" =~ ^[Yy]$ ]] \
    && return 0 \
    || return 1
}

function ask() {
  print_question "$1"
  read -e $2
}

function ask_input() {
  print_question "$1"
  read -n 1 $2
  printf "\n"
}

function ask_for_confirmation() {
  print_question "$1 (y/n)"
  read -n 1
  printf "\n"
}

function cmd_exists() {
  [ -x "$(command -v "$1")" ] \
    && return 0 \
    || return 1
}

function print_question() {
  # Print output in yellow
  # printf "\e[0;33m  [?] $1\e[0m "
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

function get_answer() {
  printf "$REPLY"
}

function print_result() {
  [ $1 -eq 0 ] \
    && print_success "$2" \
    || print_error "$2"

  [ "$3" == "true" ] && [ $1 -ne 0 ] \
    && exit
}

function print_error() {
  # Print output in red
  # printf "\e[0;31m  [✖] $1 $2\e[0m\n"
  printf "\r\033[2K  [\033[0;31m ✖ \033[0m] $1 $2\n"
}

function print_info() {
  # Print output in purple
  printf "\n\e[0;36m $1\e[0m\n"
}

function print_success() {
  # Print output in green
  # printf "\e[0;32m  [✔] $1\e[0m\n"
  printf "\r\033[2K  [ \033[00;32m✔\033[0m ] $1\n"
}

function brew_test_package() {
  if ! brew ls --versions $1 > /dev/null; then
    return 1;
  fi
  return 0;
}

function find_in_file() {
  [[ -f $1 ]] && return 0 || return 1
}

function find_in_zshrc() {
  if find_in_file $PWD/zsh/zshrc.symlink; then
    grep -Fxq "$1" $PWD/zsh/zshrc.symlink && return 0 || return 1
  fi
  return 1
}


function main() {
  rootdir="$(cd "$(dirname "$BASH_SOURCE")"; cd ..; pwd)"
  . $rootdir/script/bootstrap --source-only

  ask_for_sudo

  for setup in macos xcode ssh git homebrew zsh; do
    . $rootdir/$setup/setup.sh
  done

  . $rootdir/homebrew/brewfile.sh

  . $rootdir/node/install.sh
  . $rootdir/ruby/install.sh
  . $rootdir/python/install.sh


  install_dotfiles

  print_success "Done!"
}

if [ "${1}" != "--source-only" ]; then
	main "${@}"
fi
