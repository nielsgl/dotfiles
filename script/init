#!/usr/bin/env bash
#
# bootstrap the machine

# Utils
function ask_for_sudo() {

  # Ask for the administrator password upfront
  sudo -v

  # Update existing `sudo` time stamp until this script has finished
  # https://gist.github.com/cowboy/3118588
  while true; do
    sudo -n true
    sleep 60
    kill -0 "$$" || exit
  done &> /dev/null &

}

# OS detection
function is_osx() {
  [[ "$OSTYPE" =~ ^darwin ]] || return 1
}
function is_ubuntu() {
  [[ "$(cat /etc/issue 2> /dev/null)" =~ Ubuntu ]] || return 1
}
function get_os() {
  for os in osx ubuntu; do
    is_$os; [[ $? == ${1:-0} ]] && echo $os
  done
}

function answer_is_yes() {
  [[ "$REPLY" =~ ^[Yy]$ ]] \
    && return 0 \
    || return 1
}

function ask() {
  print_question "$1"
  read $2
}

function ask_for_confirmation() {
  print_question "$1 (y/n) "
  read -n 1
  printf "\n"
}

function cmd_exists() {
  [ -x "$(command -v "$1")" ] \
    && printf 0 \
    || printf 1
}

function print_question() {
  # Print output in yellow
  printf "\e[0;33m  [?] $1\e[0m"
}

function get_answer() {
  printf "$REPLY"
}

function print_result() {
  [ $1 -eq 0 ] \
    && print_success "$2" \
    || print_error "$2"

  [ "$3" == "true" ] && [ $1 -ne 0 ] \
    && exit
}

function print_error() {
  # Print output in red
  printf "\e[0;31m  [✖] $1 $2\e[0m\n"
}

function print_info() {
  # Print output in purple
  printf "\n\e[0;34m $1\e[0m\n\n"
}

function print_success() {
  # Print output in green
  printf "\e[0;32m  [✔] $1\e[0m\n"
}



# ask_for_confirmation "Do you want to update the hostname?"
# if answer_is_yes; then
#   print_success "yeey"
# else
#   print_error "boo"
# fi


function setup_hostname () {
  ask_for_confirmation "Do you want to update the hostname?"
  if answer_is_yes; then
    print_info "Current hostname: '$(hostname)'"
    ask "Enter the hostname:" hostname
    print_info "Setting new hostname to $hostname..."
    sudo scutil --set HostName "$hostname"
    compname=$(sudo scutil --get HostName | tr '-' '.')
    print_info "Setting computer name to $compname"
    sudo scutil --set ComputerName "$compname"
    sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string "$compname"
  fi
  print_success "Hostname has been set up."
}

function setup_xcode() {
  if [[ ! "$(type -P gcc)" ]] && is_osx; then
    print_error "XCode or the Command Line Tools for XCode must be installed first."
    # exit 1
    
    ###############################################################################
    # XCode Command Line Tools                                                    #
    ###############################################################################

    if ! xcode-select --print-path &> /dev/null; then

      # Prompt user to install the XCode Command Line Tools
      xcode-select --install &> /dev/null

      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      # Wait until the XCode Command Line Tools are installed
      until xcode-select --print-path &> /dev/null; do
        sleep 5
      done

      print_result $? 'Install XCode Command Line Tools'

      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      # Point the `xcode-select` developer directory to
      # the appropriate directory from within `Xcode.app`
      # https://github.com/alrra/dotfiles/issues/13

      sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer
      print_result $? 'Make "xcode-select" developer directory point to Xcode'

      # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      # Prompt user to agree to the terms of the Xcode license
      # https://github.com/alrra/dotfiles/issues/10

      sudo xcodebuild -license
      print_result $? 'Agree with the XCode Command Line Tools licence'

    fi
  else
    print_success "XCode has been set up."
  fi
}

function setup_ssh() {
  print_info 'Checking for SSH key, generating one if it does not exist...'
  if [ ! -f ~/.ssh/id_rsa.pub ]; then
    ask "Enter email address:" email
    ssh-keygen -t rsa -b 4096 -C "$email"
    ssh-add ~/.ssh/id_rsa
  fi
  print_success "SSH has been set up."
}

function install_homebrew() {
  print_info 'Installing Homebrew'

  print_info $(cmd_exists "brew")
  if [[ '1' == $(cmd_exists "brew") ]]; then
    print_info "Installing Homebrew"
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
  print_success "Homebrew has been installed."
}

function install_zsh() {
  # Test to see if zshell is installed.  If it is:
  if [ -f /bin/zsh -o -f /usr/bin/zsh ]; then
    # Install Oh My Zsh if it isn't already present
    if [[ ! -d $dir/oh-my-zsh/ ]]; then
      sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
    fi
    # Set the default shell to zsh if it isn't currently set to zsh
    if [[ ! $(echo $SHELL) == $(which zsh) ]]; then
      chsh -s $(which zsh)
    fi
  else
    # If zsh isn't installed, get the platform of the current machine
    platform=$(uname);
    # If the platform is Linux, try an apt-get to install zsh and then recurse
    if [[ $platform == 'Linux' ]]; then
      if [[ -f /etc/redhat-release ]]; then
        sudo yum install zsh
        install_zsh
      fi
      if [[ -f /etc/debian_version ]]; then
        sudo apt-get install zsh
        install_zsh
      fi
    # If the platform is OS X, tell the user to install zsh :)
    elif [[ $platform == 'Darwin' ]]; then
      echo "We'll install zsh, then re-run this script!"
      brew install zsh
      exit
    fi
  fi
}

function setup_homebrew() {
  print_info 'Setting up Homebrew'

  if [[ $(cmd_exists "brew") ]]; then
    brew update
    brew doctor

    # set up git and zsh first
    brew install git --with-brewed-curl --with-brewed-openssl
    brew install zsh
    #brew cask install atom
  fi

  print_success 'Homebrew has been set up'
}

ask_for_sudo
setup_hostname
setup_xcode
setup_ssh
install_homebrew
setup_homebrew


